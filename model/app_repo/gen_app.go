///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package app_repo

import (
	"fmt"
	"time"

	"github.com/liuwqiang/tykd/model"

	"gorm.io/gorm"
)

func NewModel() *App {
	return new(App)
}

func NewQueryBuilder() *appRepoQueryBuilder {
	return new(appRepoQueryBuilder)
}

func (t *App) Create(db *gorm.DB) (err error) {
	if err = db.Create(t).Error; err != nil {
		return fmt.Errorf("%s create err", err)
	}
	return nil
}

type appRepoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *appRepoQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *appRepoQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&App{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return fmt.Errorf("%s updates err", err)
	}
	return nil
}

func (qb *appRepoQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&App{}).Error; err != nil {
		return fmt.Errorf("%s delete err", err)
	}
	return nil
}

func (qb *appRepoQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&App{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *appRepoQueryBuilder) First(db *gorm.DB) (*App, error) {
	ret := &App{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *appRepoQueryBuilder) QueryOne(db *gorm.DB) (*App, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *appRepoQueryBuilder) QueryAll(db *gorm.DB) ([]*App, error) {
	var ret []*App
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *appRepoQueryBuilder) Limit(limit int) *appRepoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *appRepoQueryBuilder) Offset(offset int) *appRepoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *appRepoQueryBuilder) WhereId(p model.Predicate, value string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereIdIn(value []string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereIdNotIn(value []string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) OrderById(asc bool) *appRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *appRepoQueryBuilder) WhereName(p model.Predicate, value string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", p),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereNameIn(value []string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereNameNotIn(value []string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) OrderByName(asc bool) *appRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "name "+order)
	return qb
}

func (qb *appRepoQueryBuilder) WhereDescription(p model.Predicate, value string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "description", p),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereDescriptionIn(value []string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "description", "IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereDescriptionNotIn(value []string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "description", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) OrderByDescription(asc bool) *appRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "description "+order)
	return qb
}

func (qb *appRepoQueryBuilder) WhereAppSecret(p model.Predicate, value string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_secret", p),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereAppSecretIn(value []string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_secret", "IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereAppSecretNotIn(value []string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_secret", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) OrderByAppSecret(asc bool) *appRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "app_secret "+order)
	return qb
}

func (qb *appRepoQueryBuilder) WhereOwnerId(p model.Predicate, value string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "owner_id", p),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereOwnerIdIn(value []string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "owner_id", "IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereOwnerIdNotIn(value []string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "owner_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) OrderByOwnerId(asc bool) *appRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "owner_id "+order)
	return qb
}

func (qb *appRepoQueryBuilder) WhereCreateDate(p model.Predicate, value time.Time) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_date", p),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereCreateDateIn(value []time.Time) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_date", "IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereCreateDateNotIn(value []time.Time) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_date", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) OrderByCreateDate(asc bool) *appRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "create_date "+order)
	return qb
}

func (qb *appRepoQueryBuilder) WhereUpdateDate(p model.Predicate, value time.Time) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "update_date", p),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereUpdateDateIn(value []time.Time) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "update_date", "IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereUpdateDateNotIn(value []time.Time) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "update_date", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) OrderByUpdateDate(asc bool) *appRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "update_date "+order)
	return qb
}
